<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hello Dog</title>


    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://hellocat.lol/generator">
    <meta property="og:title" content="Hello Cat">
    <meta property="og:image" content="https://hellocat.lol/assets/thumb.png">

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:url" content="https://hellocat.lol/generator">
    <meta name="twitter:title" content="Hello Cat">
    <meta name="twitter:image" content="https://hellocat.lol/assets/thumb.png">

    <link rel="icon" type="image/png" sizes="64x64" href="https://hellocat.lol/assets/favicon.png">
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
    <link rel="preload" href="../css2?family=Dongle" as="style">
    <link href="../css2?family=Dongle" rel="stylesheet">

    <link rel="stylesheet" href="../ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer">

    <style>
      body,
      html {
        height: 100%;
        margin: 0;
        font-family: "Dongle", sans-serif;
        color: white;
        background: radial-gradient(circle, #ee9047, #faf01b);
        z-index: 2;
      }

      .meme-maker-wrapper {
        min-height: 100vh;
        max-width: 840px;
        margin: 0 auto;
        text-align: center;
        z-index: 10;
      }

      .meme-maker-wrapper h1 {
        color: white;
        font-size: 10rem;
        line-height: 6rem;
        margin: 3rem 0;
        text-shadow: 1px 10px 1px #c15f2b;
      }

      .meme-maker-inner-wrapper {
        padding: 1rem;
      }

      .meme-maker-images {
        display: flex;
        overflow-x: auto;
        height: 140px;
        align-items: center;
        width: 100%;
        margin: 0 0 1rem 0;
        height: 140px;
      }

      @media screen and (min-width: 740px) {
        .meme-maker-images {
          justify-content: center;
        }
      }

      .meme-maker-images img {
        object-fit: contain;
        margin-right: 10px;
        max-width: 75px;
        max-height: 100%;
        width: auto;
        cursor: pointer;
      }

      .select-image {
        border: 1px solid white;
        border-radius: 8px;
        height: 300px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        cursor: pointer;
        user-select: none;
      }

      .select-image-text {
        font-size: 52px;
        line-height: 38px;
      }

      .select-image-mini-text {
        font-size: 40px;
        line-height: 38px;
      }

      .meme-maker {
        max-width: 100%;
        position: relative;
        display: flex;
        justify-content: center;
      }

      .meme-maker-canvas {
        display: none;
      }

      .meme-maker-bg-image {
        width: auto;
        max-width: 100%;
        height: auto;
        user-select: none;
        pointer-events: none;
      }

      .meme-maker-inserted-image-wrapper {
        width: 160px;
        height: auto;
        position: absolute;
        top: 0;
        left: 0;
        user-select: none;
        cursor: pointer;
      }

      .meme-maker-inserted-image {
        width: 100%;
        height: auto;
        user-select: none;
        pointer-events: none;
      }

      .active-image {
        outline: 2px solid #333;
        touch-action: none;
      }

      .buttons-bar,
      .rotation-bar {
        display: none;
      }

      .active-image .buttons-bar {
        display: flex;
        position: absolute;
        top: -35px;
        left: 50%;
        transform: translateX(-50%);
        width: 120px;
        height: 30px;
        outline: 1px solid #333;
        cursor: pointer;
        align-items: center;
        justify-content: space-around;
        background-color: #555;
        z-index: 1;
      }

      .active-image .rotation-bar {
        display: flex;
        position: absolute;
        bottom: -26px;
        left: 50%;
        transform: translateX(-50%);
        width: 28px;
        height: 28px;
        border-radius: 28px;
        outline: 1px solid #333;
        cursor: pointer;
        align-items: center;
        justify-content: space-around;
        background-color: #555;
        z-index: 1;
      }

      .flip-horizontal {
        transform: scaleX(-1);
      }

      .meme-maker-buttons {
        margin: 2rem 0 0 0;
      }

      .meme-maker-button {
        font-family: "Dongle", sans-serif;
        font-size: 32px;
        padding: 0.25rem 1.125rem 0 1.125rem;
        border-radius: 54px !important;
        line-height: 40px;
        border: 2px solid white;
        background-color: transparent;
        color: white;
        cursor: pointer;
        width: 128px;
        height: 48px;
      }

      .meme-maker-button:focus {
        outline: none;
        box-shadow: 0 0 0 2px #ccc;
      }
    </style>
  </head>
  <body>
    <div class="meme-maker-wrapper">
      <div class="meme-maker-inner-wrapper">
        <h1>HELLO CAT</h1>
        <div class="meme-maker-images">
          <img src="assets/hellocat.png" alt="Hello Cat">
          <img src="assets/tinfoil.png" alt="Tinfoil">
          <img src="assets/gun.png" alt="Gun">
          <img src="assets/cowboy.png" alt="Cowboy">
          <img src="assets/mario.png" alt="Mario">
          <img src="assets/magic.png" alt="Magic">
          <img src="assets/vietnam.png" alt="Vietnam">
          <img src="assets/mcdonol.png" alt="McDonol">
          <img src="assets/santa.png" alt="Santa">
        </div>
        <div class="select-image">
          <div class="select-image-text">click to add image</div>
          <div class="select-image-mini-text">or</div>
          <div class="select-image-text">drop image here</div>
        </div>
        <input type="file" id="image-input" accept="image/*" style="display: none">
        <div class="meme-maker">
          <div class="meme-maker-canvas">
            <img class="meme-maker-bg-image" src="" alt="hello cat background image">
          </div>
        </div>
        <div class="meme-maker-buttons">
          <button class="meme-maker-button meme-maker-button-download">
            download
          </button>
        </div>
      </div>
    </div>
  </body>

  <script src="../ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="../npm/interactjs%401.10.11/dist/interact.min.js"></script>
  <script src="../ajax/libs/html2canvas/1.3.2/html2canvas.min.js"></script>

  <script>
    function imageFlipHorizontal(image) {
      image.toggleClass("flip-horizontal")
    }

    function imageSendDown(imageWrapper) {
      const prevSibling = imageWrapper.prev()
      if (prevSibling.length) {
        imageWrapper.insertBefore(prevSibling)
      }
    }

    function imageSendUp(imageWrapper) {
      const nextSibling = imageWrapper.next()
      if (nextSibling.length) {
        imageWrapper.insertAfter(nextSibling)
      }
    }

    function imageTrash(imageWrapper) {
      imageWrapper.remove()
    }

    $(document).ready(function () {
      $(".select-image").click(function () {
        $("#image-input").click()
      })

      $(".select-image").on("dragover", function (event) {
        event.preventDefault()
        event.stopPropagation()
        $(this).css("background-color", "lightgrey")
      })

      $(".select-image").on("dragleave", function (event) {
        event.preventDefault()
        event.stopPropagation()
        $(this).css("background-color", "")
      })

      $(".select-image").on("drop", function (event) {
        event.preventDefault()
        event.stopPropagation()
        $(this).css("background-color", "")

        if (
          event.originalEvent.dataTransfer &&
          event.originalEvent.dataTransfer.files.length
        ) {
          var file = event.originalEvent.dataTransfer.files[0]

          if (file.type.match("image.*")) {
            var reader = new FileReader()

            reader.onload = function (e) {
              $(".meme-maker-bg-image").attr("src", e.target.result)
              $(".select-image").hide()
              $(".meme-maker-canvas").css("display", "flex")
            }

            reader.readAsDataURL(file)
          } else {
            alert("Please drop an image file.")
          }
        }
      })

      $("#image-input").change(function () {
        if (this.files && this.files[0]) {
          var reader = new FileReader()

          reader.onload = function (e) {
            $(".meme-maker-bg-image").attr("src", e.target.result)
            $(".select-image").hide()
            $(".meme-maker-canvas").css("display", "flex")
          }

          reader.readAsDataURL(this.files[0])
        }
      })

      $(".meme-maker-images img").click(function () {
        const clonedImage = $(this).clone()

        const wrapper = $("<div>", {
          class: "meme-maker-inserted-image-wrapper"
        })

        clonedImage.addClass("meme-maker-inserted-image")
        wrapper.append(clonedImage)

        const buttonsBar = $("<div>", { class: "buttons-bar" })

        const flipHorizontalBtn = $("<i>", { class: "fa-solid fa-right-left" })
        flipHorizontalBtn.on("click", () => imageFlipHorizontal(clonedImage))
        buttonsBar.append(flipHorizontalBtn)

        const sendDownBtn = $("<i>", { class: "fa-solid fa-arrow-down" })
        sendDownBtn.on("click", () => imageSendDown(wrapper))
        buttonsBar.append(sendDownBtn)

        const sendUpBtn = $("<i>", { class: "fa-solid fa-arrow-up" })
        sendUpBtn.on("click", () => imageSendUp(wrapper))
        buttonsBar.append(sendUpBtn)

        const trashBtn = $("<i>", { class: "fa-solid fa-trash" })
        trashBtn.on("click", () => imageTrash(wrapper))
        buttonsBar.append(trashBtn)

        wrapper.append(buttonsBar)

        const rotationBar = $(`
          <div class="rotation-bar">
            <i class="fa-solid fa-rotate"></i>
          </div>
        `)
        wrapper.append(rotationBar)

        $(".meme-maker-canvas").append(wrapper)

        setTimeout(() => {
          wrapper.addClass("active-image")
        }, 0)
      })

      $(".meme-maker-canvas").on(
        "click",
        ".meme-maker-inserted-image-wrapper",
        function () {
          $(".meme-maker-inserted-image-wrapper").removeClass("active-image")
          $(this).addClass("active-image")
        }
      )

      $(document).mousedown(function (e) {
        if (!$(e.target).hasClass("active-image") && e.target.tagName !== "I") {
          $(".active-image").removeClass("active-image")
        }
      })

      $(".meme-maker-canvas").on(
        "mousedown",
        ".meme-maker-inserted-image-wrapper",
        function (e) {
          setTimeout(() => {
            $(".meme-maker-inserted-image-wrapper").removeClass("active-image")
            $(this).addClass("active-image")
            e.stopPropagation()
          }, 0)
        }
      )

      $(".meme-maker-button-download").click(function () {
        html2canvas(document.querySelector(".meme-maker-canvas")).then(
          (canvas) => {
            let image = canvas
              .toDataURL("image/png")
              .replace("image/png", "image/octet-stream")
            let tempLink = document.createElement("a")
            tempLink.href = image
            tempLink.download = "meme-maker-image.png"
            tempLink.click()
          }
        )
      })

      let isRotationBarDrag = false

      $(".meme-maker-canvas").on(
        "mousedown",
        ".rotation-bar",
        function (event) {
          console.log("Rotation bar drag started")
          isRotationBarDrag = true
          event.stopPropagation()
        }
      )

      $(document).on("mouseup", function () {
        isRotationBarDrag = false
      })

      interact(".meme-maker-inserted-image-wrapper.active-image")
        .draggable({
          modifiers: [
            interact.modifiers.restrictRect({
              endOnly: true
            })
          ],
          listeners: {
            move: function (event) {
              if (!isRotationBarDrag) {
                var target = event.target,
                  x =
                    (parseFloat(target.getAttribute("data-x")) || 0) + event.dx,
                  y =
                    (parseFloat(target.getAttribute("data-y")) || 0) + event.dy

                const rotationMatch = target.style.transform.match(
                  /rotate\((-?\d+(\.\d+)?)deg\)/
                )
                const currentRotation = rotationMatch ? rotationMatch[1] : 0

                target.style.webkitTransform =
                  target.style.transform = `translate(${x}px, ${y}px) rotate(${currentRotation}deg)`

                target.setAttribute("data-x", x)
                target.setAttribute("data-y", y)
              }
            }
          }
        })
        .resizable({
          edges: { top: true, left: true, bottom: true, right: true },
          modifiers: [
            interact.modifiers.restrictEdges({
              outer: "parent"
            }),
            interact.modifiers.restrictSize({
              min: { width: 50, height: 50 }
            })
          ],
          listeners: {
            move: function (event) {
              var target = event.target
              var x =
                (parseFloat(target.getAttribute("data-x")) || 0) +
                event.deltaRect.left
              var y =
                (parseFloat(target.getAttribute("data-y")) || 0) +
                event.deltaRect.top
              var width = event.rect.width
              var height = event.rect.height

              const rotationMatch = target.style.transform.match(
                /rotate\((-?\d+(\.\d+)?)deg\)/
              )
              const currentRotation = rotationMatch ? rotationMatch[1] : 0

              target.style.webkitTransform =
                target.style.transform = `translate(${x}px, ${y}px) rotate(${currentRotation}deg)`

              target.style.width = `${width}px`
              target.style.height = `${height}px`

              target.setAttribute("data-x", x)
              target.setAttribute("data-y", y)
            }
          }
        })

      interact(".rotation-bar").draggable({
        onstart: function (event) {
          const imageWrapper = event.target.closest(
            ".meme-maker-inserted-image-wrapper"
          )
          const rect = imageWrapper.getBoundingClientRect()
          imageWrapper.setAttribute("data-center-x", rect.left + rect.width / 2)
          imageWrapper.setAttribute("data-center-y", rect.top + rect.height / 2)
        },
        onmove: function (event) {
          const imageWrapper = event.target.closest(
            ".meme-maker-inserted-image-wrapper"
          )
          const centerX = parseFloat(imageWrapper.getAttribute("data-center-x"))
          const centerY = parseFloat(imageWrapper.getAttribute("data-center-y"))

          const dx = event.clientX - centerX
          const dy = event.clientY - centerY

          let angle = Math.atan2(dy, dx) * (180 / Math.PI) - 90
          if (angle < 0) angle += 360

          const x = parseFloat(imageWrapper.getAttribute("data-x")) || 0
          const y = parseFloat(imageWrapper.getAttribute("data-y")) || 0
          imageWrapper.style.transform = `translate(${x}px, ${y}px) rotate(${angle}deg)`
        }
      })
    })
  </script>
</html>
